schema-version: 1.0.0
application-family: Configuration Management
application-name: SaltStack
application-version: latest
flavor: Single Linux server - RCv3
flavor-weight: 1
rackconnect: true
reach-info:
  tattoo: https://0b5294b243620310a700-e388a7f3aba385a925111b1fc6f680d4.ssl.cf2.rackcdn.com/saltstack-tattoo.png
  icon-20x20: https://0b5294b243620310a700-e388a7f3aba385a925111b1fc6f680d4.ssl.cf2.rackcdn.com/saltstack-icon-20x20.png
hidden_outputs:
  - private_key
abstract: |
  SaltStack is an open-source configuration management system.
instructions: |
  #### Getting Started
  If you are new to [Salt Stack](http://www.saltstack.com/), check out
  their [online documentation](http://docs.saltstack.com/) for information
  on how to get started. This deployment handles the setup and
  configuration of the Salt Master as well as the minions. When you connect
  to your salt master via SSH, you can immediately begin issuing commands
  to your minions. The SSH Private Key provided will work on all nodes of
  your deployment.

  To start, login to the Salt Master via SSH using the Private key provided in
  the outputs.  Once logged in, list and accept the Salt keys using the
  `salt-key` command.  Here are examples of how to list and accept those keys:

  ```bash
  root@salt-master:~# salt-key
  Accepted Keys:
  Unaccepted Keys:
  salt-minion0
  salt-minion1
  Rejected Keys:

  root@salt-master:~# salt-key -A
  The following keys are going to be accepted:
  Unaccepted Keys:
  salt-minion0
  salt-minion1
  Proceed? [n/Y] Y
  Key for minion salt-minion0 accepted.
  Key for minion salt-minion1 accepted.

  root@salt-master:~#
  ```

  Once the keys are accepted, you can begin managing your minions.  To run a
  command on on all minions, use `cmd.run`.  Here's an example where we want to
  find the IPv4 address of the eth2 interace of the minions:

  ```bash
  root@salt-master:~# salt '*' cmd.run 'ifconfig eth2 | grep "inet addr"'
  salt-minion1:
                inet addr:192.168.224.2  Bcast:192.168.239.255  Mask:255.255.240.0
  salt-minion0:
                inet addr:192.168.224.3  Bcast:192.168.239.255  Mask:255.255.240.0
  root@salt-master:~#
  ```

  #### Logging in via SSH
  The private key provided in the passwords section can be used to login as
  root via SSH. We have an article on how to use these keys with [Mac OS X
  and Linux](http://www.rackspace.com/knowledge_center/article/logging-in-with-a-ssh-private-key-on-linuxmac)
  as well as [Windows using
  PuTTY](http://www.rackspace.com/knowledge_center/article/logging-in-with-a-ssh-private-key-on-windows).

  #### Using the GitFS backend
  The prerequisites for using [the GitFS
  backend](http://docs.saltstack.com/topics/tutorials/gitfs.html) are
  installed. All that needs to be changed is the `/etc/salt/master` file to
  use the git backend and at least one remote salt state:

  ```
  fileserver_backend:
      - git

  gitfs_remotes:
      - https://github.com/saltstack/salt-states.git
  ```
  #### Scaling Out
  For scaling your deployment, we recommend using [Salt
  Cloud](http://docs.saltstack.com/en/latest/topics/cloud/config.html). The
  `salt-cloud` package has been installed as a part of this deployment. An
  example for configuring Salt Cloud with Rackspace can be found
  [here](http://docs.saltstack.com/en/latest/topics/cloud/config.html#rackspace).
description: |
  ####Single Linux server - RCv3
  Multiple Linux servers running [SaltStack](http://www.saltstack.com/).
  This deployment has a single Salt Master with multiple Minions. All minions
  will be configured to point to the Salt Master. Includes dependencies for
  Salt Cloud and the GitFS backend.

  This template will only function with RackConnect v3.
